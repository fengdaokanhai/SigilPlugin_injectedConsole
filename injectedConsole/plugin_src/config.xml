<tk m-title="configuration">
    <script type="text/python">
    from tkinter import filedialog
    from tkinter.font import Font

    font_bold_underline = Font(weight='bold', underline=1)

    def set_config(config):
        namemap['cb_selsh']['values'] = SHELLS
        namemap['cb_selsh'].current(SHELLS.index(config['shell']))
        namemap['startup_errors'].set(config['errors'])
        namemap['lb'].replace(config['startup'])

    def ask_save_config_dialog():
        val = ask_save_config()
        if val is not None:
            config['configs'].append([val, config['config'].copy()])

    def ask_load_config_dialog():
        ask_load_config()

    def new_config():
        config['config'] = {'shell': 'python', 'errors': 'ignore', 'startup': []}
        set_config(config['config'])

    def save_to_file():
        filename = filedialog.asksaveasfilename()
        if not filename.endswith('json'):
            filename += '.json'
        __import__('json').dump(config, open(filename, 'w'), ensure_ascii=False)

    def load_from_file():
        new_config = __import__('json').load(filedialog.askopenfile())
        config.update(new_config)
        set_config(config['config'])

    def click_add_file():
        filenames = filedialog.askopenfilenames()
        if filenames:
            namemap['lb'].insert(tk.END, *filenames)

    def click_add_dir():
        directory = filedialog.askdirectory()
        if directory:
            namemap['lb'].insert(tk.END, directory)

    def click_del_sel():
        sels = namemap['lb'].curselection()
        if sels:
            for sel in reversed(sels):
                namemap['lb'].delete(sel)

    def click_clear():
        namemap['lb'].delete(0, tk.END)

    def click_move_up():
        namemap['lb'].onKeyUp()

    def click_move_down():
        namemap['lb'].onKeyDown()

    try:
        def startfile(path, _start=__import__('os').startfile):
            _start(path)
    except AttributeError:
        _PLATFROM_SYSTEM = __import__('platform').system()
        if _PLATFROM_SYSTEM == 'Linux':
            def startfile(path, _start=__import__('subprocess').Popen):
                _start(['xdg-open', path])
        elif _PLATFROM_SYSTEM == 'Darwin':
            def startfile(path, _start=__import__('subprocess').Popen):
                _start(['open', path])
        else:
            def startfile(path):
                pass
        del _PLATFROM_SYSTEM

    def change_startup_errors():
        config['config']['errors'] = namemap['startup_errors'].get()

    __app__.bind('&lt;Escape&gt;', lambda event: event.widget.quit())
    </script>
    <toplevel name="ask_save_config" m-resizable="true, false">
        <script type="text/python">
        def confirm():
            target = namemap['ask_save_config']
            setattr(target, '$data', input_sv.get())
            target.destroy()

        def cancel():
            target = namemap['ask_save_config']
            setattr(target, '$data', None)
            target.destroy()
        </script>
        <label text="Enter a config name" />
        <entry textvariable="([(input_sv := tk.StringVar())])" />
        <button text="Cancel" command="([cancel])" m-pack="side=right" />
        <button text="Confirm" command="([confirm])" m-pack="side=right" />
    </toplevel>
    <toplevel name="ask_load_config">
        <script type="text/python">
        def btn_click_del_lb_sel():
            target = namemap['lb2']
            sels = target.curselection()
            if sels:
                for sel in reversed(sels):
                    target.delete(sel)

        def btn_click_lb_clear():
            target = namemap['lb2']
            target.delete(0, tk.END)

        def click_move_up():
            namemap['lb2'].onKeyUp()

        def click_move_down():
            namemap['lb2'].onKeyDown()
         </script>
        <frame>
            <button text="Delete Selected" width="10" command="([btn_click_del_lb_sel])" m-pack="side=left" />
            <button text="Clear All" width="10" command="([btn_click_lb_clear])" m-pack="side=left" />
        </frame>
        <frame>
            <button text="⤒" width="1" command="([click_move_up])" m-pack="side=left" >
                <Tooltip text="Move selected items up" />
            </button>
            <button text="⤓" width="1" command="([click_move_down])" m-pack="side=left" >
                <Tooltip text="Move selected items down" />
            </button>
        </frame>
        <MultiListbox 
            name="lb2" 
            header_list="([[('Label', 10, 'Double click to modify the label'), 
                         ('Config', 40, 'Double click to apply the value')]])"
            data="([config['configs']])"
            selectmode="extended"
            borderwidth="0"
            relief="flat"
            exportselection="false"
            selectborderwidth="0"
            m-pack="side=left, fill=both, expand=true"
        />
        <script>
        def lb_label_dbclick(event):
            lb = event.widget
            sels = lb.curselection()
            if sels:
                selected = sels[0]
                val = ask_save_config()
                if val is not None:
                    lb.delete(selected)
                    lb.insert(0, val)
                    config['configs'][selected][0] = val

        def lb_config_dbclick(event):
            sels = event.widget.curselection()
            if sels:
                selected = sels[0]
                config['config'] = config['configs'][selected][1].copy()
                set_config(config['config'])
                namemap['ask_load_config'].destroy()

        lb2.listboxes['Label'].bind('&lt;Double-Button-1&gt;', lb_label_dbclick)
        lb2.listboxes['Config'].bind('&lt;Double-Button-1&gt;', lb_config_dbclick)
        </script>
    </toplevel>
    <label bd="1" relief="sunken" anchor="w" m-pack="side=top,fill=x" text="close the window to take effect" bg="red" fg="yellow" font="([font_bold_underline])" />
    <label text="Select a Shell" height="2" font="([font_bold_underline])">
        <Tooltip text="Select a shell to start (Missing dependencies will be automatically installed)" />
    </label>
    <ttk.combobox name="cb_selsh" state="readonly" />
    <ttk.separator orient="horizontal" m-pack="fill=x" />
    <script type="text/python">
    def cb_set_shell(event):
        config['config']['shell'] = event.widget.get()

    cb_selsh.bind("&lt;&lt;ComboboxSelected&gt;&gt;", cb_set_shell)
    cb_selsh.bind("&lt;Return&gt;", lambda event: __app__.quit())
    </script>
    <label text="Select Some Startups" height="2" font="([font_bold_underline])">
        <Tooltip args-="text=([el_text])" >WARNING: PLEASE CONFIRM THE SECURITY OF THE ADDED STARTUP BY YOURSELF IN ADVANCE.

Add some scripts that will be executed or registered automatically at startup.

It will deal with the following situations separately:
    1. execute:  A file (e.g., suffixed by .py or .pyz), or a folder (or a .zip file) with __main__.py, will be executed directly.
    2. register: A folder (or .zip file) without __main__.py will be appended to sys.path.
        </Tooltip>
    </label>
    <frame>
        <StringVar value="ignore" name="startup_errors" />
        <label text="Errors" m-grid="row=0,column=0" font="([font_bold_underline])" >
            <Tooltip text="How to deal with errors?" />
        </label>
        <radiobutton variable="([startup_errors])" text="ignore" value="ignore" m-grid="row=0,column=1" command="([change_startup_errors])">
            <Tooltip text="To ignore the error and continue processing the remaining startups" />
        </radiobutton>
        <radiobutton variable="([startup_errors])" text="raise" value="raise" m-grid="row=0,column=2" command="([change_startup_errors])">
            <Tooltip text="To raise an exception and terminate" />
        </radiobutton>
        <radiobutton variable="([startup_errors])" text="stop" value="stop" m-grid="row=0,column=3" command="([change_startup_errors])">
            <Tooltip text="Stop processing the remaining startups and go directly to the shell" />
        </radiobutton>
    </frame>
    <frame>
        <button text="Add Files" width="10" command="([click_add_file])" m-pack="side=left" />
        <button text="Add Folder" width="10" command="([click_add_dir])" m-pack="side=left" />
    </frame>
    <frame>
        <button text="Delete Selected" width="10" command="([click_del_sel])" m-pack="side=left" />
        <button text="Clear All" width="10" command="([click_clear])" m-pack="side=left" />
    </frame>
    <frame>
        <button text="⤒" width="1" command="([click_move_up])" m-pack="side=left" >
            <Tooltip text="Move selected items up" />
        </button>
        <button text="⤓" width="1" command="([click_move_down])" m-pack="side=left" >
            <Tooltip text="Move selected items down" />
        </button>
    </frame>
    <DragDropListbox name="lb" selectmode="extended" m-pack="side=left,fill=both,expand=([True])" />
    <scrollbar name="sc" orient="vertical" m-pack="side=left,fill=y"/>
    <script type="text/python">
    def lb_startfile(event):
        path = event.widget.get(event.widget.curselection())
        startfile(path)

    lb.config(yscrollcommand=sc.set)
    sc.config(command=lb.yview)
    lb.bind('&lt;Double-Button-1&gt;', lb_startfile)
    set_config(config['config'])
    </script>
    <menu>
        <menu label="File">
            <method>
                <add_command label="Save to File" command="([save_to_file])" />
                <add_command label="Load from File" command="([load_from_file])" />
                <add_separator />
                <add_command label="Exit" command="([__app__.quit])" />
            </method>
        </menu>
        <menu label="Edit">
            <method>
                <add_command label="New" command="([new_config])" />
                <add_command label="Save" command="([ask_save_config_dialog])" />
                <add_command label="Load" command="([ask_load_config_dialog])" />
            </method>
        </menu>
    </menu>
</tk>
